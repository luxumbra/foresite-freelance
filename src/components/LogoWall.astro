---
import type { LogoWall } from "@/data/technologies";
import Icon from "./Icon.astro";

const { size, tech, slider } = Astro.props as LogoWall;

const wrapperClasses = (size: LogoWall["size"]) => {
  let classname = "";
  switch (size) {
    case "small":
      classname = "py-0 opacity-55";
      break;
    case "medium":
      classname = "py-4";
      break;
    case "large":
      classname = "py-8";
      break;
    default:
      classname = "py-4";
      break;
  }
  return classname;
};
const innerClasses = (size: LogoWall["size"]) => {
  let classname = "";
  switch (size) {
    case "small":
      classname = "w-full";
      break;
    case "medium":
      classname = "w-24";
      break;
    case "large":
      classname = "w-32";
      break;
    default:
      classname = "w-16";
      break;
  }
  return classname;
};

const sliderPadding = (size: LogoWall["size"]) => {
  let classname = "";

  switch (size) {
    case "small":
      classname = "gap-6 flex-wrap gap-y-4 md:gap-6 md:flex-nowrap";
      break;
    case "medium":
      classname = "gap-8 gap-y-4 md:gap-8 flex-wrap flex-row md:gap-y-4";
      break;
    case "large":
      classname = "gap-12 md:gap-20 w-max";
      break;
    default:
      classname = "gap-6 md:gap-8";
      break;
  }
  return classname;
};

const itemGap = (size: LogoWall["size"]) => {
  let classname = "";
  switch (size) {
    case "small":
      classname = "gap-1";
      break;
    default:
      classname = "gap-2";
      break;
  }
  return classname;
};

const fontSize = (size: LogoWall["size"]) => {
  let classname = "";

  switch (size) {
    case "small":
      classname = "text-sm";
      break;
    case "medium":
      classname = "text-base";
      break;
    case "large":
      classname = "text-lg";
      break;
    default:
      classname = "text-lg";
      break;
  }
  return classname;
};
const svgSize = (size: LogoWall["size"]) => {
  let classname = "";

  switch (size) {
    case "small":
      classname = "w-4";
      break;
    case "medium":
      classname = "w-6";
      break;
    case "large":
      classname = "w-8";
      break;
    default:
      classname = "w-8";
      break;
  }
  return classname;
};
const resultsLimit = (size: LogoWall["size"]) => {
  let limit: number;
  switch (size) {
    case "small":
      limit = 6;
      break;
    case "medium":
      limit = 100;
      break;
    case "large":
      limit = 100;
      break;
    default:
      limit = 100;
      break;
  }

  return limit;
};
const techList =
  size == "large"
    ? [...tech, ...tech, ...tech]
    : size == "medium"
      ? tech
      : tech;
---

<div class:list={["relative overflow-x-hidden group", wrapperClasses(size)]}>
  <div
    class:list={[
      "pointer-events-none absolute inset-y-0 left-0 bg-gradient-to-r from-[var(--background)] to-transparent z-20",
      size == "small" || size == "medium" ? "to-5%" : "to-100%",
      innerClasses(size),
    ]}
  >
  </div>
  <div
    class:list={[
      "pointer-events-none absolute inset-y-0 right-0 bg-gradient-to-l from-[var(--background)] to-transparent z-20",
      size == "small" ? "to-5%" : "to-100%",
      innerClasses(size),
    ]}
  >
  </div>

  <div
    class:list={[
      "flex",
      slider ? "animate-scroll group-hover:[animation-play-state:_paused]" : "",
      sliderPadding(size),
    ]}
  >
    {
      techList.map((tech, i) => {
        if (i >= resultsLimit(size)) return null;

        return (
          <div
            class:list={[
              "flex items-center justify-start transition-all duration-300",
              itemGap(size),
            ]}
          >
            <Icon
              name={tech.name ? tech.name : ""}
              wrapperClass="object-cover transition-transform opacity-60 flex-shrink"
              svgClass={`h-auto ${svgSize(size)} fill-slate-400`}
            />
            <span
              class:list={[
                "font-medium text-[var(--white-icon)]",
                fontSize(size),
              ]}
            >
              {tech.label}
            </span>
          </div>
        );
      })
    }
  </div>
</div>

<style is:global>
  @keyframes scroll {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(-50%);
    }
  }
  .animate-scroll {
    animation: scroll 40s linear infinite;
  }

  @media (min-width: 768px) {
    .animate-scroll {
      animation-duration: 50s;
    }
  }
</style>
